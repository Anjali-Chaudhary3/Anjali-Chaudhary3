https://leetcode.com/problems/maximum-ice-cream-bars/solutions/

sc:O(1) tc:O(nlogn)

class Solution {
public:
    int maxIceCream(vector<int>& costs, int coins) {
        int n=costs.size();
        sort(costs.begin(),costs.end());
        // good try but integer overflow 
        // int max=accumulate(costs.begin(),costs.end(),0);
        // if(coins>=max)
        // return n;
        if(coins<costs[0])
        return 0;
        int s=0,c=0;
        for(int i=0;i<n;i++)
        {
            if((coins-costs[i])>=0)
            {
                coins-=costs[i];
                c++;
            }
            else 
            break;
        }
        return c;
    }
};


int maxIceCream(vector<int>& costs, int coins) {
    int arr[100001]={0};
    
    for(int i=0;i<costs.size();i++)
    {
        arr[costs[i]]++;
    }
    int count = 0;
    for(int i=1;i<=100000;i++)
    {
        if(arr[i])
        {
            long long curr = (long long)arr[i]*i;
            if(curr<=coins)
            {
                count += arr[i];
                coins -= curr;
            }
            else
            {
                count += (coins/i);
                break;
            }
        }
    }
    return count;
}
class Solution {
public:
    int maxIceCream(vector<int>& costs, int coins) {
        priority_queue<int> pq;
        for(int i=0;i<costs.size();i++){
            if(costs[i]<=coins){
                coins-=costs[i];
                pq.push(costs[i]);
            } else if(!pq.empty() && pq.top()>costs[i]){
                coins+=(pq.top()-costs[i]);
                pq.pop();
                pq.push(costs[i]);
            }
        }
        return pq.size();
    }
};

https://leetcode.com/problems/maximum-ice-cream-bars/solutions/3005488/two-method-s-easy-solution-c-beginner-friendly/
 class Solution {
 public:
     int maxIceCream(vector<int>& costs, int coins) {
         int ans=0;
         priority_queue<int,vector<int>,greater<int>> pq(costs.begin(),costs.end());    // adding elems takes O(nlogn) tc
         while(!pq.empty() && pq.top()<=coins){
             coins-=pq.top();                                                           //pq.top takes O(1) tc
             ans++;
             pq.pop();
         } 
         return ans;
     }
 };
